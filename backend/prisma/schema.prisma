generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  email                   String                   @unique @db.VarChar(255)
  username                String?                  @unique @db.VarChar(50)
  passwordHash            String                   @map("password_hash") @db.VarChar(255)
  firstName               String?                  @map("first_name") @db.VarChar(100)
  lastName                String?                  @map("last_name") @db.VarChar(100)
  phone                   String?                  @db.VarChar(20)
  avatarUrl               String?                  @map("avatar_url")
  timezone                String?                  @default("UTC") @db.VarChar(50)
  language                String?                  @default("zh-CN") @db.VarChar(10)
  currencyPreference      String?                  @default("CNY") @map("currency_preference") @db.VarChar(3)
  isActive                Boolean?                 @default(true) @map("is_active")
  isVerified              Boolean?                 @default(false) @map("is_verified")
  emailVerifiedAt         DateTime?                @map("email_verified_at") @db.Timestamptz(6)
  lastLoginAt             DateTime?                @map("last_login_at") @db.Timestamptz(6)
  loginCount              Int?                     @default(0) @map("login_count")
  failedLoginAttempts     Int?                     @default(0) @map("failed_login_attempts")
  lockedUntil             DateTime?                @map("locked_until") @db.Timestamptz(6)
  createdAt               DateTime?                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?                @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  auditLogs               AuditLog[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
  portfolio_tags          portfolio_tags[]
  portfolios              Portfolio[]
  reports                 Report[]
  tag_categories          tag_categories[]
  tags                    tags[]
  transaction_tags        transaction_tags[]
  transactions            Transaction[]
  assignedRoles           UserRole[]               @relation("AssignedBy")
  userRoles               UserRole[]
  userSessions            UserSession[]

  @@index([createdAt], map: "idx_users_created_at")
  @@index([email], map: "idx_users_email")
  @@index([isActive], map: "idx_users_is_active")
  @@index([lastLoginAt], map: "idx_users_last_login_at")
  @@index([username], map: "idx_users_username")
  @@map("users")
}

model Portfolio {
  id                 String              @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  userId             String              @map("user_id") @db.Uuid
  name               String              @db.VarChar(100)
  description        String?
  baseCurrency       String              @default("CNY") @map("base_currency") @db.VarChar(3)
  isDefault          Boolean?            @default(false) @map("is_default")
  isActive           Boolean?            @default(true) @map("is_active")
  createdAt          DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  cashFlows          CashFlow[]
  performanceMetrics PerformanceMetric[]
  portfolioSnapshots PortfolioSnapshot[]
  portfolio_tags     portfolio_tags[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  positions          Position[]
  reports            Report[]
  tradingAccounts    TradingAccount[]
  transactions       Transaction[]

  @@unique([userId, name])
  @@index([isActive], map: "idx_portfolios_is_active")
  @@index([isDefault], map: "idx_portfolios_is_default")
  @@index([userId], map: "idx_portfolios_user_id")
  @@map("portfolios")
}

model TradingAccount {
  id              String        @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  portfolioId     String        @map("portfolio_id") @db.Uuid
  name            String        @db.VarChar(100)
  accountType     String        @map("account_type") @db.VarChar(50)
  brokerName      String?       @map("broker_name") @db.VarChar(100)
  accountNumber   String?       @map("account_number") @db.VarChar(100)
  currency        String        @db.VarChar(3)
  initial_balance Decimal?      @default(0) @db.Decimal(20, 8)
  current_balance Decimal?      @default(0) @db.Decimal(20, 8)
  isActive        Boolean?      @default(true) @map("is_active")
  createdAt       DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  cash_flows      CashFlow[]
  positions       Position[]
  portfolio       Portfolio     @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions    Transaction[]

  @@index([accountType], map: "idx_trading_accounts_account_type")
  @@index([isActive], map: "idx_trading_accounts_is_active")
  @@index([portfolioId], map: "idx_trading_accounts_portfolio_id")
  @@map("trading_accounts")
}

model Asset {
  id                                                        String         @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  symbol                                                    String         @db.VarChar(50)
  name                                                      String         @db.VarChar(200)
  assetTypeId                                               String         @map("asset_type_id") @db.Uuid
  marketId                                                  String?        @map("market_id") @db.Uuid
  currency                                                  String         @db.VarChar(3)
  isin                                                      String?        @db.VarChar(12)
  cusip                                                     String?        @db.VarChar(9)
  sector                                                    String?        @db.VarChar(100)
  industry                                                  String?        @db.VarChar(100)
  description                                               String?
  metadata                                                  Json?
  isActive                                                  Boolean?       @default(true) @map("is_active")
  createdAt                                                 DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                 DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  risk_level                                                String?        @default("MEDIUM") @db.VarChar(20)
  liquidity_tag                                             String?        @default("MEDIUM") @db.VarChar(20)
  lot_size                                                  Int?           @default(1)
  tick_size                                                 Decimal?       @default(0.01) @db.Decimal(10, 6)
  listing_date                                              DateTime?      @db.Date
  delisting_date                                            DateTime?      @db.Date
  tags                                                      String[]
  created_by                                                String?        @db.Uuid
  updated_by                                                String?        @db.Uuid
  assetPrices                                               AssetPrice[]
  assetType                                                 AssetType      @relation(fields: [assetTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  market                                                    Market?        @relation(fields: [marketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cash_flows                                                CashFlow[]
  optionDetails                                             OptionDetail[]
  option_details_option_details_underlying_asset_idToassets OptionDetail[] @relation("option_details_underlying_asset_idToassets")
  positions                                                 Position[]
  transactions                                              Transaction[]

  @@unique([symbol, marketId])
  @@index([isActive], map: "idx_assets_active")
  @@index([assetTypeId], map: "idx_assets_asset_type")
  @@index([assetTypeId], map: "idx_assets_asset_type_id")
  @@index([createdAt], map: "idx_assets_created_at")
  @@index([currency], map: "idx_assets_currency")
  @@index([isActive], map: "idx_assets_is_active")
  @@index([marketId], map: "idx_assets_market")
  @@index([marketId], map: "idx_assets_market_id")
  @@index([sector], map: "idx_assets_sector")
  @@index([symbol], map: "idx_assets_symbol")
  @@index([symbol, marketId], map: "idx_assets_symbol_market")
  @@map("assets")
}

model Position {
  id                  String             @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  portfolioId         String             @map("portfolio_id") @db.Uuid
  tradingAccountId    String             @map("trading_account_id") @db.Uuid
  assetId             String             @map("asset_id") @db.Uuid
  quantity            Decimal            @default(0) @db.Decimal(20, 8)
  averageCost         Decimal            @default(0) @map("average_cost") @db.Decimal(20, 8)
  totalCost           Decimal            @default(0) @map("total_cost") @db.Decimal(20, 8)
  currency            String             @db.VarChar(3)
  firstPurchaseDate   DateTime?          @map("first_purchase_date") @db.Date
  lastTransactionDate DateTime?          @map("last_transaction_date") @db.Date
  isActive            Boolean?           @default(true) @map("is_active")
  createdAt           DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  positionSnapshots   PositionSnapshot[]
  asset               Asset              @relation(fields: [assetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portfolio           Portfolio          @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tradingAccount      TradingAccount     @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([portfolioId, tradingAccountId, assetId])
  @@index([assetId], map: "idx_positions_asset_id")
  @@index([isActive], map: "idx_positions_is_active")
  @@index([portfolioId], map: "idx_positions_portfolio_id")
  @@index([tradingAccountId], map: "idx_positions_trading_account_id")
  @@map("positions")
}

model Transaction {
  id                       String                     @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  portfolioId              String                     @map("portfolio_id") @db.Uuid
  tradingAccountId         String                     @map("trading_account_id") @db.Uuid
  assetId                  String                     @map("asset_id") @db.Uuid
  transactionType          String                     @map("transaction_type") @db.VarChar(20)
  quantity                 Decimal                    @db.Decimal(20, 8)
  price                    Decimal?                   @db.Decimal(20, 8)
  totalAmount              Decimal                    @map("total_amount") @db.Decimal(20, 8)
  fees                     Decimal?                   @default(0) @db.Decimal(20, 8)
  taxes                    Decimal?                   @default(0) @db.Decimal(20, 8)
  currency                 String                     @db.VarChar(3)
  exchange_rate            Decimal?                   @default(1) @db.Decimal(20, 8)
  transactionDate          DateTime                   @map("transaction_date") @db.Date
  settlement_date          DateTime?                  @db.Date
  notes                    String?
  tags                     String[]
  liquidity_tag_id         String?                    @db.Uuid
  external_id              String?                    @db.VarChar(100)
  metadata                 Json?
  createdAt                DateTime?                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime?                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user_id                  String?                    @db.Uuid
  side                     String?                    @db.VarChar(20)
  executed_at              DateTime?                  @db.Timestamptz(6)
  settled_at               DateTime?                  @db.Timestamptz(6)
  status                   String?                    @default("EXECUTED") @db.VarChar(20)
  liquidity_tag            String?                    @db.VarChar(20)
  cash_flows               CashFlow[]
  transaction_tag_mappings transaction_tag_mappings[]
  asset                    Asset                      @relation(fields: [assetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  liquidity_tags           LiquidityTag?              @relation(fields: [liquidity_tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portfolio                Portfolio                  @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tradingAccount           TradingAccount             @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                    User?                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assetId], map: "idx_transactions_asset_id")
  @@index([executed_at], map: "idx_transactions_executed_at")
  @@index([external_id], map: "idx_transactions_external_id")
  @@index([liquidity_tag], map: "idx_transactions_liquidity_tag")
  @@index([liquidity_tag_id], map: "idx_transactions_liquidity_tag_id")
  @@index([portfolioId], map: "idx_transactions_portfolio_id")
  @@index([side], map: "idx_transactions_side")
  @@index([status], map: "idx_transactions_status")
  @@index([tags], map: "idx_transactions_tags", type: Gin)
  @@index([totalAmount], map: "idx_transactions_total_amount")
  @@index([tradingAccountId], map: "idx_transactions_trading_account_id")
  @@index([transactionDate], map: "idx_transactions_transaction_date")
  @@index([transactionType], map: "idx_transactions_transaction_type")
  @@index([user_id], map: "idx_transactions_user_id")
  @@map("transactions")
}

model AssetType {
  id          String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  code        String    @unique @db.VarChar(20)
  name        String    @db.VarChar(100)
  category    String    @db.VarChar(50)
  description String?
  isActive    Boolean?  @default(true) @map("is_active")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  assets      Asset[]

  @@index([category], map: "idx_asset_types_category")
  @@index([code], map: "idx_asset_types_code")
  @@index([isActive], map: "idx_asset_types_is_active")
  @@map("asset_types")
}

model Market {
  id            String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  code          String    @unique @db.VarChar(10)
  name          String    @db.VarChar(100)
  country       String    @db.VarChar(3)
  currency      String    @db.VarChar(3)
  timezone      String    @db.VarChar(50)
  trading_hours Json?
  holidays      Json?
  isActive      Boolean?  @default(true) @map("is_active")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  assets        Asset[]

  @@index([code], map: "idx_markets_code")
  @@index([isActive], map: "idx_markets_is_active")
  @@map("markets")
}

model Role {
  id              String           @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name            String           @unique @db.VarChar(50)
  description     String?
  isActive        Boolean?         @default(true) @map("is_active")
  createdAt       DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at      DateTime?        @default(now()) @db.Timestamptz(6)
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name            String           @unique @db.VarChar(100)
  resource        String           @db.VarChar(50)
  action          String           @db.VarChar(50)
  description     String?
  createdAt       DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  roleId       String     @map("role_id") @db.Uuid
  permissionId String     @map("permission_id") @db.Uuid
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "idx_role_permissions_permission_id")
  @@index([roleId], map: "idx_role_permissions_role_id")
  @@map("role_permissions")
}

model UserRole {
  id             String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  roleId         String    @map("role_id") @db.Uuid
  assignedBy     String?   @map("assigned_by") @db.Uuid
  assignedAt     DateTime? @default(now()) @map("assigned_at") @db.Timestamptz(6)
  expiresAt      DateTime? @map("expires_at") @db.Timestamptz(6)
  isActive       Boolean?  @default(true) @map("is_active")
  assignedByUser User?     @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role           Role      @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, roleId])
  @@index([isActive], map: "idx_user_roles_is_active")
  @@index([roleId], map: "idx_user_roles_role_id")
  @@index([userId], map: "idx_user_roles_user_id")
  @@map("user_roles")
}

model UserSession {
  id               String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  tokenHash        String    @map("token_hash") @db.VarChar(255)
  refreshTokenHash String?   @map("refresh_token_hash") @db.VarChar(255)
  deviceInfo       Json?     @map("device_info")
  ipAddress        String?   @map("ip_address") @db.Inet
  userAgent        String?   @map("user_agent")
  isActive         Boolean?  @default(true) @map("is_active")
  expiresAt        DateTime  @map("expires_at") @db.Timestamptz(6)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  lastUsedAt       DateTime? @default(now()) @map("last_used_at") @db.Timestamptz(6)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt], map: "idx_user_sessions_expires_at")
  @@index([isActive], map: "idx_user_sessions_is_active")
  @@index([tokenHash], map: "idx_user_sessions_token_hash")
  @@index([userId], map: "idx_user_sessions_user_id")
  @@map("user_sessions")
}

model EmailVerificationToken {
  id          String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  token_hash  String    @db.VarChar(255)
  email       String    @db.VarChar(255)
  expiresAt   DateTime  @map("expires_at") @db.Timestamptz(6)
  verified_at DateTime? @db.Timestamptz(6)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt], map: "idx_email_verification_tokens_expires_at")
  @@index([token_hash], map: "idx_email_verification_tokens_token_hash")
  @@index([userId], map: "idx_email_verification_tokens_user_id")
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id         String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  token_hash String    @db.VarChar(255)
  expiresAt  DateTime  @map("expires_at") @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt], map: "idx_password_reset_tokens_expires_at")
  @@index([token_hash], map: "idx_password_reset_tokens_token_hash")
  @@index([userId], map: "idx_password_reset_tokens_user_id")
  @@map("password_reset_tokens")
}

model AuditLog {
  id             String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  userId         String?   @map("user_id") @db.Uuid
  table_name     String    @db.VarChar(100)
  record_id      String    @db.Uuid
  action         String    @db.VarChar(20)
  oldValues      Json?     @map("old_values")
  newValues      Json?     @map("new_values")
  changed_fields String[]
  ipAddress      String?   @map("ip_address") @db.Inet
  userAgent      String?   @map("user_agent")
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  user           User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([action], map: "idx_audit_logs_action")
  @@index([createdAt], map: "idx_audit_logs_created_at")
  @@index([record_id], map: "idx_audit_logs_record_id")
  @@index([table_name], map: "idx_audit_logs_table_name")
  @@index([userId], map: "idx_audit_logs_user_id")
  @@map("audit_logs")
}

model CashFlow {
  id                 String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  portfolioId        String          @map("portfolio_id") @db.Uuid
  trading_account_id String?         @db.Uuid
  asset_id           String?         @db.Uuid
  flowType           String          @map("flow_type") @db.VarChar(20)
  amount             Decimal         @db.Decimal(20, 8)
  currency           String          @db.VarChar(3)
  flowDate           DateTime        @map("flow_date") @db.Date
  description        String?
  transaction_id     String?         @db.Uuid
  createdAt          DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  date               DateTime?       @db.Timestamptz(6)
  category           String?         @db.VarChar(50)
  assets             Asset?          @relation(fields: [asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portfolio          Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  trading_accounts   TradingAccount? @relation(fields: [trading_account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions       Transaction?    @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([asset_id], map: "idx_cash_flows_asset_id")
  @@index([category], map: "idx_cash_flows_category")
  @@index([date], map: "idx_cash_flows_date")
  @@index([flowDate], map: "idx_cash_flows_flow_date")
  @@index([flowType], map: "idx_cash_flows_flow_type")
  @@index([portfolioId], map: "idx_cash_flows_portfolio_id")
  @@index([trading_account_id], map: "idx_cash_flows_trading_account_id")
  @@index([transaction_id], map: "idx_cash_flows_transaction_id")
  @@map("cash_flows")
}

model AssetPrice {
  id             String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  assetId        String    @map("asset_id") @db.Uuid
  priceDate      DateTime  @map("price_date") @db.Date
  openPrice      Decimal?  @map("open_price") @db.Decimal(20, 8)
  highPrice      Decimal?  @map("high_price") @db.Decimal(20, 8)
  lowPrice       Decimal?  @map("low_price") @db.Decimal(20, 8)
  closePrice     Decimal   @map("close_price") @db.Decimal(20, 8)
  volume         BigInt?
  adjusted_close Decimal?  @db.Decimal(20, 8)
  currency       String    @db.VarChar(3)
  data_source    String?   @db.VarChar(50)
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  asset          Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([assetId, priceDate])
  @@index([assetId, priceDate], map: "idx_asset_prices_asset_date")
  @@index([assetId], map: "idx_asset_prices_asset_id")
  @@index([createdAt], map: "idx_asset_prices_created_at")
  @@index([priceDate], map: "idx_asset_prices_date")
  @@index([priceDate], map: "idx_asset_prices_price_date")
  @@map("asset_prices")
}

model ExchangeRate {
  id           String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  fromCurrency String    @map("from_currency") @db.VarChar(3)
  toCurrency   String    @map("to_currency") @db.VarChar(3)
  rateDate     DateTime  @map("rate_date") @db.Date
  rate         Decimal   @db.Decimal(20, 8)
  dataSource   String?   @map("data_source") @db.VarChar(50)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([fromCurrency, toCurrency, rateDate])
  @@index([fromCurrency, toCurrency], map: "idx_exchange_rates_currencies")
  @@index([fromCurrency, toCurrency, rateDate], map: "idx_exchange_rates_currencies_date")
  @@index([rateDate], map: "idx_exchange_rates_rate_date")
  @@map("exchange_rates")
}

model Benchmark {
  id              String           @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name            String           @unique @db.VarChar(100)
  symbol          String           @unique @db.VarChar(20)
  description     String?
  asset_class     String?          @db.VarChar(50)
  currency        String           @db.VarChar(3)
  data_source     String?          @db.VarChar(50)
  isActive        Boolean?         @default(true) @map("is_active")
  createdAt       DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  benchmarkPrices BenchmarkPrice[]

  @@index([isActive], map: "idx_benchmarks_is_active")
  @@index([symbol], map: "idx_benchmarks_symbol")
  @@map("benchmarks")
}

model BenchmarkPrice {
  id          String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  benchmarkId String    @map("benchmark_id") @db.Uuid
  priceDate   DateTime  @map("price_date") @db.Date
  price       Decimal   @db.Decimal(20, 8)
  currency    String    @db.VarChar(3)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  benchmark   Benchmark @relation(fields: [benchmarkId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([benchmarkId, priceDate])
  @@index([benchmarkId, priceDate], map: "idx_benchmark_prices_benchmark_date")
  @@index([benchmarkId], map: "idx_benchmark_prices_benchmark_id")
  @@index([priceDate], map: "idx_benchmark_prices_price_date")
  @@map("benchmark_prices")
}

model LiquidityTag {
  id           String        @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  name         String        @unique @db.VarChar(50)
  description  String?
  color        String?       @db.VarChar(7)
  sort_order   Int?          @default(0)
  isActive     Boolean?      @default(true) @map("is_active")
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  transactions Transaction[]

  @@index([isActive], map: "idx_liquidity_tags_is_active")
  @@index([sort_order], map: "idx_liquidity_tags_sort_order")
  @@map("liquidity_tags")
}

model OptionDetail {
  id                                                String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  assetId                                           String    @map("asset_id") @db.Uuid
  underlying_asset_id                               String?   @db.Uuid
  optionType                                        String    @map("option_type") @db.VarChar(10)
  strikePrice                                       Decimal   @map("strike_price") @db.Decimal(20, 8)
  expirationDate                                    DateTime  @map("expiration_date") @db.Date
  contract_size                                     Int?      @default(100)
  exercise_style                                    String?   @default("american") @db.VarChar(20)
  createdAt                                         DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  asset                                             Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  assets_option_details_underlying_asset_idToassets Asset?    @relation("option_details_underlying_asset_idToassets", fields: [underlying_asset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([assetId], map: "idx_option_details_asset_id")
  @@index([expirationDate], map: "idx_option_details_expiration_date")
  @@index([underlying_asset_id], map: "idx_option_details_underlying_asset_id")
  @@map("option_details")
}

model PerformanceMetric {
  id            String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  portfolioId   String    @map("portfolio_id") @db.Uuid
  metric_type   String    @db.VarChar(50)
  period_type   String    @db.VarChar(20)
  period_start  DateTime  @db.Date
  period_end    DateTime  @db.Date
  value         Decimal   @db.Decimal(20, 8)
  currency      String?   @db.VarChar(3)
  metadata      Json?
  calculated_at DateTime? @default(now()) @db.Timestamptz(6)
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([portfolioId, metric_type, period_type, period_start, period_end])
  @@index([metric_type], map: "idx_performance_metrics_metric_type")
  @@index([period_start, period_end], map: "idx_performance_metrics_period_dates")
  @@index([period_type], map: "idx_performance_metrics_period_type")
  @@index([portfolioId], map: "idx_performance_metrics_portfolio_id")
  @@map("performance_metrics")
}

model PortfolioSnapshot {
  id                   String             @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  portfolioId          String             @map("portfolio_id") @db.Uuid
  snapshotDate         DateTime           @map("snapshot_date") @db.Date
  totalValue           Decimal            @map("total_value") @db.Decimal(20, 8)
  cash_value           Decimal            @default(0) @db.Decimal(20, 8)
  invested_value       Decimal            @default(0) @db.Decimal(20, 8)
  unrealized_gain_loss Decimal            @default(0) @db.Decimal(20, 8)
  realized_gain_loss   Decimal            @default(0) @db.Decimal(20, 8)
  currency             String             @db.VarChar(3)
  metadata             Json?
  createdAt            DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  portfolio            Portfolio          @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  position_snapshots   PositionSnapshot[]

  @@unique([portfolioId, snapshotDate])
  @@index([portfolioId, snapshotDate], map: "idx_portfolio_snapshots_portfolio_date")
  @@index([portfolioId], map: "idx_portfolio_snapshots_portfolio_id")
  @@index([snapshotDate], map: "idx_portfolio_snapshots_snapshot_date")
  @@map("portfolio_snapshots")
}

model PositionSnapshot {
  id                    String            @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  positionId            String            @map("position_id") @db.Uuid
  portfolio_snapshot_id String            @db.Uuid
  snapshotDate          DateTime          @map("snapshot_date") @db.Date
  quantity              Decimal           @db.Decimal(20, 8)
  marketPrice           Decimal?          @map("market_price") @db.Decimal(20, 8)
  marketValue           Decimal?          @map("market_value") @db.Decimal(20, 8)
  average_cost          Decimal           @db.Decimal(20, 8)
  total_cost            Decimal           @db.Decimal(20, 8)
  unrealized_gain_loss  Decimal?          @db.Decimal(20, 8)
  currency              String            @db.VarChar(3)
  createdAt             DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  portfolio_snapshots   PortfolioSnapshot @relation(fields: [portfolio_snapshot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  position              Position          @relation(fields: [positionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([portfolio_snapshot_id], map: "idx_position_snapshots_portfolio_snapshot_id")
  @@index([positionId], map: "idx_position_snapshots_position_id")
  @@index([snapshotDate], map: "idx_position_snapshots_snapshot_date")
  @@map("position_snapshots")
}

model Report {
  id                String            @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  userId            String            @map("user_id") @db.Uuid
  portfolioId       String?           @map("portfolio_id") @db.Uuid
  name              String            @db.VarChar(200)
  description       String?
  reportType        String            @map("report_type") @db.VarChar(50)
  parameters        Json
  schedule          Json?
  is_scheduled      Boolean?          @default(false)
  isActive          Boolean?          @default(true) @map("is_active")
  last_generated_at DateTime?         @db.Timestamptz(6)
  createdAt         DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  reportExecutions  ReportExecution[]
  portfolio         Portfolio?        @relation(fields: [portfolioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([isActive], map: "idx_reports_is_active")
  @@index([is_scheduled], map: "idx_reports_is_scheduled")
  @@index([portfolioId], map: "idx_reports_portfolio_id")
  @@index([reportType], map: "idx_reports_report_type")
  @@index([userId], map: "idx_reports_user_id")
  @@map("reports")
}

model ReportExecution {
  id               String    @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  reportId         String    @map("report_id") @db.Uuid
  execution_status String    @default("pending") @db.VarChar(20)
  started_at       DateTime? @default(now()) @db.Timestamptz(6)
  completed_at     DateTime? @db.Timestamptz(6)
  file_path        String?
  file_size        BigInt?
  errorMessage     String?   @map("error_message")
  metadata         Json?
  report           Report    @relation(fields: [reportId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([reportId], map: "idx_report_executions_report_id")
  @@index([started_at], map: "idx_report_executions_started_at")
  @@index([execution_status], map: "idx_report_executions_status")
  @@map("report_executions")
}

model portfolio_tags {
  id           Int       @id @default(autoincrement())
  portfolio_id String    @db.Uuid
  tag_id       Int
  created_by   String    @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  users        User      @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  portfolios   Portfolio @relation(fields: [portfolio_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags         tags      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([portfolio_id, tag_id])
}

model tag_categories {
  id                   Int              @id @default(autoincrement())
  name                 String           @db.VarChar(100)
  description          String?
  color                String?          @default("#52c41a") @db.VarChar(7)
  icon                 String?          @db.VarChar(50)
  user_id              String           @db.Uuid
  parent_id            Int?
  sort_order           Int?             @default(0)
  is_active            Boolean?         @default(true)
  created_at           DateTime?        @default(now()) @db.Timestamp(6)
  updated_at           DateTime?        @default(now()) @db.Timestamp(6)
  tag_categories       tag_categories?  @relation("tag_categoriesTotag_categories", fields: [parent_id], references: [id], onUpdate: NoAction)
  other_tag_categories tag_categories[] @relation("tag_categoriesTotag_categories")
  users                User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags                 tags[]

  @@unique([user_id, name])
}

model tags {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  description    String?
  color          String?          @default("#1890ff") @db.VarChar(7)
  icon           String?          @db.VarChar(50)
  user_id        String           @db.Uuid
  category_id    Int?
  is_system      Boolean?         @default(false)
  is_active      Boolean?         @default(true)
  usage_count    Int?             @default(0)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  portfolio_tags portfolio_tags[]
  tag_categories tag_categories?  @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users          User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, name])
}

model transaction_tag_mappings {
  transaction_id   String           @db.Uuid
  tag_id           String           @db.Uuid
  transaction_tags transaction_tags @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions     Transaction      @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([transaction_id, tag_id])
}

model transaction_tags {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @unique @db.VarChar(100)
  description              String?
  color                    String?                    @db.VarChar(7)
  user_id                  String?                    @db.Uuid
  is_system                Boolean?                   @default(false)
  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  transaction_tag_mappings transaction_tag_mappings[]
  users                    User?                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([name], map: "idx_transaction_tags_name")
  @@index([user_id], map: "idx_transaction_tags_user_id")
}
